buildscript {
	repositories {
		mavenCentral()
	}
}

// FORMAT: maven.modrinth:<project-slug>:<file-version>
// FORMAT: curse.maven:<descriptor>-<projectid>:<fileid>
// FORMAT: com.github.<User>:<Repo>:<Tag/commit_hash>
// see https://jitpack.io/


plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	// Quilt mappings
	id 'org.quiltmc.quilt-mappings-on-loom' version '3.1.1'
	// Quiltflower for decompiling Minecraft
	id 'io.github.juuxel.loom-quiltflower-mini' version '1.1.0'
	id "com.modrinth.minotaur" version "1.1.0"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "org.jetbrains.kotlin.jvm"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

String unPunctuated = project.mod_name.replaceAll("[',!?]", "")

project.ext {
	ModId = unPunctuated.replace(" ", "")
	mod_id = unPunctuated.toLowerCase().replace(" ", "_")
	archives_base_name = project.ext.mod_id.replace("_", "-")

	minecraft_version_list = project.minecraft_versions.split(",")
	min_minecraft_version = project.ext.minecraft_version_list[0]
	min_minecraft_semver = toSemver(project.ext.min_minecraft_version, 1.18)
	minecraft_version = project.ext.minecraft_version_list[project.ext.minecraft_version_list.size() - 1]
	minecraft_semver = toSemver(project.ext.minecraft_version, 1.18)
}

String mc_ver_suffix = "+MC" + ((project.ext.minecraft_version_list.size() > 1 ?
		project.ext.min_minecraft_version + "-" : "") +
		project.ext.minecraft_version)

version = project.mod_version + mc_ver_suffix
archivesBaseName = project.ext.archives_base_name

group = project.maven_group

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
		content { includeGroup "org.quiltmc" }
	}

	maven {
		name = 'Quilt Snapshots'
		url = 'https://maven.quiltmc.org/repository/snapshot'
		content { includeGroup "org.quiltmc" }
	}

	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}

	maven {
		name = "BuildCraft"
		url = "https://mod-buildcraft.com/maven"
	}

	maven {
		name = "guntram"
		url = "https://minecraft.guntram.de/maven/"
		content { includeGroup "de.guntram.mcmod" }
	}

	maven {
		url "https://maven.shedaniel.me/"
//		content { includeGroupByRegex "^me\\.shedaniel\\..+" }
	}

	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/releases/"
	}

	maven {
		url = "https://maven.dblsaiko.net"
		content {includeGroup "net.dblsaiko"}
	}

	maven {
		url = "https://oskarstrom.net/maven"
		content { includeGroup "net.oskarstrom" }
	}

	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'dev.cafeteria'
		}
	}

	maven {
		url = uri("https://storage.googleapis.com/devan-maven/")
	}

	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release/"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}

	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}

	maven { url 'https://maven.blamejared.com' }

//	maven {
//		name = "Ladysnake Libs"
//		url = "https://dl.bintray.com/ladysnake/libs"
//	}
//
//	maven {
//		name = "Spinnery"
//		url  "https://dl.bintray.com/spinnery/Spinnery"
//	}

	// Broad mavens
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content { includeGroup "maven.modrinth" }
	}

	maven {
		name = "CurseMaven"
		url = "https://www.cursemaven.com"
		content { includeGroup "curse.maven" }
	}

	// JITPACK MUST BE LAST
	maven {
		name = "JitPack"
		url "https://jitpack.io"
		content { includeGroupByRegex "^com\\.github\\..+" }
	}
}

dependencies {
	/**
	 ** Broad Maven dependency formats:
	 Modrinth: maven.modrinth:<project-slug>:<file-version>
	 CurseMaven: curse.maven:<descriptor>-<projectid>:<fileid>
	 JitPack: com.github.<User>:<Repo>:<Tag/commit_hash> , see https://jitpack.io/
	 **/

	//to change the versions see the gradle.properties file
	minecraft ("com.mojang:minecraft:$project.ext.minecraft_version")
//	mappings "net.fabricmc:yarn:" + project.yarn_mappings
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$project.quilt_build_number:v2"))
	})
	modImplementation "net.fabricmc:fabric-loader:" + project.loader_version

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation("net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version")

	// GUI library
	bundledMod("io.github.cottonmc:LibGui:$project.libgui_version")
	// LibGui dependency
//	bundledMod("io.github.juuxel:libninepatch:$project.libninepatch_version")

	//Config library
	requiredApi("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_config_version")
	// Config menu support
	optionalMod(true, "com.terraformersmc:modmenu:$project.modmenu_version")
	// translation fetching
	bundledMod("de.guntram.mcmod:crowdin-translate:$project.crowdin_translate_version")

	// speed up launching in dev
	devRuntime("com.github.astei:lazydfu:$project.lazy_dfu_version")
//	devRuntime("net.oskarstrom:DashLoader:$project.dashloader_version")

	// remember window size+pos in dev
//	devRuntime("net.dblsaiko:winwonders:$project.winwonders_version")

	//compat testing
//	optionalMod true, "curse.maven:toms_storage_fabric-396826:3550445"
//	optionalMod true, "maven.modrinth:modern-industrialization:1.0.4"
////	optionalMod true, "curse.maven:industrial-revolution-391708:3599880"
//	optionalMod true, "maven.modrinth:fabric-language-kotlin:1.7.1+kotlin.1.6.10"
//	optionalMod true, "curse.maven:roughly-enough-items-310111:3638571"
//	optionalMod true, "dev.architectury:architectury-fabric:3.6.15"
//	optionalMod true, "dev.cafeteria:fake-player-api:0.3.0"
//	optionalMod true, "net.devtech:arrp:0.5.4"
//	optionalApi true, "teamreborn:energy:2.2.0"
//	optionalApi true, "me.shedaniel.cloth.api:cloth-api:3.1.61"
//	optionalApi true, "me.shedaniel.cloth.api:cloth-armor-api-v1:1.6.59"
//	optionalApi true, "io.github.ladysnake:PlayerAbilityLib:1.5.0"
//	optionalApi true, "vazkii.patchouli:Patchouli:1.18.1-65-FABRIC"
//	modImplementation("com.github.Draylar:magna:1.7.0-1.18") {
//		exclude(group: "io.github.prospector")
//		exclude(group: "me.shedaniel.cloth")
//		exclude(group: "net.fabricmc.fabric-api")
//	}
//	optionalApi true, "com.github.Draylar:magna:${project.magna_version}", ["io.github.prospector", "me.shedaniel.cloth", "net.fabricmc.fabric-api"]

}

def requiredMod_(String dep) {
	dependencies.modImplementation(dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nbt-crafting"
	}
}

def requiredApi(String dep) {
	dependencies.modApi(dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nbt-crafting"
	}
}

def bundle(String dep) {
	dependencies.include(dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nbt-crafting"
	}
}

def devRuntime(String dep) {
	dependencies.modRuntimeOnly (dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nbt-crafting"
	}
}

def optionalMod(boolean enabled, String dep) {
	if (enabled) devRuntime(dep)

	dependencies.modCompileOnly (dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nbt-crafting"
	}
}

def optionalApi(boolean enabled, String dep) {
	if (enabled) devRuntime(dep)
	dependencies.compileOnlyApi (dep) {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nbt-crafting"
	}
}

def bundledMod(String dep) {
	requiredMod_(dep)
	bundle(dep)
}

def bundledApi(String dep) {
	requiredApi(dep)
	bundle(dep)
}

processResources {
	inputs.property "version", project.version
	inputs.property "mod_id", project.mod_id


	filesMatching("fabric.mod.json") {
		expand ([
				"version": project.version,

				"minecraft_version": project.ext.minecraft_semver,
				"min_minecraft_version": project.ext.min_minecraft_semver,
				"min_loader_version": project.min_loader_version,

				"mod_id": project.ext.mod_id,
				"ModId": project.ext.ModId,
				"mod_name": project.mod_name,
				"mod_description": project.mod_description,
				"mod_version": project.version,
				"maven_group": project.maven_group,
				"archives_base_name": project.ext.archives_base_name,
				"author": project.author,

				"min_fabric_api_version": project.min_fabric_api_version,

				"min_cloth_config_version": project.min_cloth_config_version,
				"modmenu_version": project.modmenu_version,
		])
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

import com.modrinth.minotaur.TaskModrinthUpload

import java.util.regex.Matcher
import java.util.regex.Pattern

static def toSemver(String baseVersion, float prefix) {
	def length = baseVersion.length()
	for (int i = 0; i < length; i++) {
		char c = baseVersion.charAt(i);
		switch (i) {
			case 0: if (c != (char)'1') return snapshotToSemver(baseVersion, i, prefix); break
			case 1: if (c != (char)'.') return snapshotToSemver(baseVersion, i, prefix); break
			case 2||3: if (!(""+c).matches("\\d")) throw illegalVersionFormatException(); break
			default: if (c == (char)'-') return betaOrRcToSemver(baseVersion, i); break
		}
	}
	return baseVersion
}

static def snapshotToSemver(baseVersion, i, prefix) {
	def length = baseVersion.length()
	if (length != 6) throw illegalVersionFormatException()
	StringBuilder snapShotSemver = new StringBuilder((String)(String.valueOf(prefix) + "-alpha."))
	for (int j = 0; j < length; j++) {
		char c = baseVersion.charAt(i)
		switch (j) {
			case 2:
				if (c != (char)'w') throw illegalVersionFormatException()
				else snapShotSemver.append("."); break
			case 5:
				if (c != (char)'a') throw illegalVersionFormatException()
				else snapShotSemver.append(".a"); break
			default:
				if (!(""+c).matches("\\d")) throw illegalVersionFormatException()
				snapShotSemver.append(c); break
		}
	}
	return snapShotSemver.toString()
}

static def betaOrRcToSemver(baseVersion, i) {
	++i
	def endPre = i + 3
	if (baseVersion.substring(i, endPre) == "pre") return blindReplace(baseVersion, i, endPre, "beta.")
	else {
		def endRc = i + 2
		if (baseVersion.substring(i, endRc) == "rc") return blindReplace(baseVersion, i, endRc, "rc.")
		else throw illegalVersionFormatException()
	}
}

static def blindReplace(string, start, end, replacement) {
	return string.substring(0, start) + replacement + string.substring(end)
}

static def illegalVersionFormatException() {
	return new IllegalStateException("Illegal version format!")
}

def readFileFirstLine(String fileName) {
	def firstLine = null
	file(fileName).withReader { reader ->
		def line
		if ((line = reader.readLine()) != null)
			firstLine = line
	}

	return firstLine
}

def getRecentChanges(int versionsToRead) {
	def newVersionLineRegex = "^- (\\d+\\.\\d+(?:\\.\\d+)?(?:-[\\d+a-z]+\\d*)?)" + "( \\(\\d{1,2} [A-Z][a-z]{2}\\.? 20\\d\\d\\):)" + "(.*)"
	Pattern newVersionLinePattern = Pattern.compile(newVersionLineRegex)

	def changelogFile = file("CHANGELOG.md")
	def changes = ""

	changelogFile.withReader { reader ->
		String line
		def firstLine = true
		while ((line = reader.readLine()) != null) {
			if (firstLine) {
				firstLine = false
				if (line.matches(newVersionLineRegex)) {
					Matcher lineMatcher = newVersionLinePattern.matcher(line)
					lineMatcher.find()
					if (!lineMatcher.group(1).startsWith(project.mod_version))
						throw new Exception("Version on first line of changelog doesn't match mod_version. ")
					def trimmedLine = lineMatcher.group(3)
					if (!trimmedLine.isEmpty()) changes += trimmedLine + "\n"
				} else throw new Exception("First line of changelog is not new version line. ")
			} else {
				if (line.matches(newVersionLineRegex)) {
					if (versionsToRead > 1) {
						versionsToRead--

						Matcher lineMatcher = newVersionLinePattern.matcher(line)
						lineMatcher.find()
						changes += "\nFrom " + (lineMatcher.group(1) + ":" + lineMatcher.group(3)) + "\n"
					} else break
				} else changes += line + "\n"
			}
		}
	}

	changes += "\nA cumulative changelog can be found [here](https://gitlab.com/supersaiyansubtlety/${project.ext.mod_id}/-/blob/master/CHANGELOG.md)"

	return changes
}

curseforge {
	def curseApiKey = readFileFirstLine("..\\CURSE_API_KEY.secret")
	if (curseApiKey != null) {
		apiKey = curseApiKey
		project {
			id = project.curseforge_id
			releaseType = mod_version.endsWith("a") ? "alpha" : mod_version.endsWith("b") ? "beta" : "release"
			project.ext.minecraft_version_list.each { String game_version -> addGameVersion game_version }
			addGameVersion "Fabric"

			changelogType = "markdown"

			def versionsToRead
			if (project.hasProperty('numVersions')) versionsToRead = Integer.parseInt(project.numVersions)
			else versionsToRead = 1

			changelog = getRecentChanges(versionsToRead)
			relations {
				requiredDependency "fabric-api"
				requiredDependency "cloth-config"
			}
			mainArtifact(remapJar.archivePath) { }

			afterEvaluate {
				uploadTask.dependsOn("build")
			}
		}
	}
	options {
		debug = false
		forgeGradleIntegration = false
		javaVersionAutoDetect = false
	}
}

task modrinth(type: TaskModrinthUpload) {
	token = readFileFirstLine("..\\MODRINTH_TOKEN.secret")
	projectId = project.modrinth_id
	versionNumber = project.version
	uploadFile = remapJar.archivePath // This is the java jar task
	if (project.hasProperty('numVersions')) changelog = getRecentChanges(Integer.parseInt(project.numVersions))
	else changelog = getRecentChanges(1)
	project.ext.minecraft_version_list.each { String game_version -> addGameVersion(game_version) }
	addLoader('fabric')
}

task publishMod {
	dependsOn = ["modrinth", "curseforge"]
}

task printRecentChanges {
	if (project.hasProperty('numVersions')) println getRecentChanges(Integer.parseInt(numVersions))
	else println getRecentChanges(1)
}
